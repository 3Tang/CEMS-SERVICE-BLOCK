package com.vrv.cems.service.block.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.vrv.cems.service.block.utils.SystemConstants;
import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheException;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

/**
 * <B>说 明</B>:ehcache 单元管理单元类
 * 
 * @author 作 者 名：chenjun<br/>
 *         E-mail ：chenjun@vrvmail.com.cn
 * @version 版 本 号：V1.0.20140725<br/>
 *          创建时间：2014-7-28 下午01:04:01
 */
public class EhCacheUtil {
	public static CacheManager singletonCacheManager;
	public static final Logger loger=Logger.getLogger(EhCacheUtil.class);

	/*
	 * 初始化CacheManager对象
	 */
	static {
		
		File file=new File(SystemConstants.PATH_EHCACHE_XML);
		try {
			singletonCacheManager = CacheManager
					.create(new FileInputStream(file));
		} catch (CacheException e) {
			loger.error("创建cache失败",e);
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			loger.error("文件找不到",e);
			e.printStackTrace();
		}
	}

	/**
	 * 获取CacheManager
	 * 
	 * @return
	 */
	public static synchronized CacheManager getSingletonCacheManager() {
		return singletonCacheManager;
	}


	/*
	 * 通过cacheName获取Cache对象
	 */
	public static Cache getCacheInstance(String cacheName) {
		Cache cache = singletonCacheManager.getCache(cacheName);
		return cache;
	}

	

	public static void set(String cacheName, String key, Object value) {
		Cache cache = singletonCacheManager.getCache(cacheName);
		if(cache==null){
			cache=getCacheInstance( cacheName);
		}
		cache.put(new Element(key, value));
	}

	public static Object get(String cacheName, String key) {
		Cache cache = singletonCacheManager.getCache(cacheName);
		if(cache!=null){
			if(cache.get(key)!=null)
			return  cache.get(key).getObjectValue();
		}
			return null;
	}

	public static Map<String, String> get(String cacheName) {
		Cache cache = singletonCacheManager.getCache(cacheName);
		@SuppressWarnings("unchecked")
		List<String> keys = cache.getKeys();
		Map<String, String> heartbeatTimes = new HashMap<String, String>();
		for (String key : keys)
			heartbeatTimes.put(key, (String) cache.get(key).getObjectValue());
		return heartbeatTimes;
	}

	/*
	 * 卸载 CacheManager,关闭 Cache
	 */
	public static void closeSingletonManager() {
		if (null != singletonCacheManager) {
			singletonCacheManager.shutdown();
		}
	}
}
